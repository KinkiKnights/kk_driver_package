#include <rclcpp/rclcpp.hpp>
#include "kk_driver_msg/msg/gm6020_cmd.hpp"
#include "kk_driver_msg/msg/pwm_cmd.hp"#include "kk_driver_msg/msg/motor_cmd.hpp"
#include "sensor_msgs/msg/joy.hpp"

class ControlNode : public rclcpp::Node {
private:
    rclcpp::TimerBase::SharedPtr timer_;
    rclcpp::Subscription<sensor_msgs::msg::Joy>::SharedPtr joy_subscription_;
    rclcpp::Publisher<kk_driver_msg::msg::Gm6020Cmd>::SharedPtr gm_publisher_;
    rclcpp::Publisher<kk_driver_msg::msg::PwmCmd>::SharedPtr pwm_publisher_;
    rclcpp::Publisher<kk_driver_msg::msg::MotorCmd>::SharedPtr motor_publisher_;

    sensor_msgs::msg::Joy::SharedPtr latest_joy_;

    float prev_error_right_ = 0.0, prev_error_left_ = 0.0;
    float integral_right_ = 0.0, integral_left_ = 0.0;
    const float Kp = 5.0, Ki = 0.5, Kd = 1.0;
    const float dt = 0.01;

    void update() {
        if (!latest_joy_) return;
        if (latest_joy_->axes.size() < 2 || latest_joy_->buttons.size() < 8) {
            RCLCPP_WARN(this->get_logger(), "Joy message too short.");
            return;
        }

        float lx = latest_joy_->axes[0];
        float ly = latest_joy_->axes[1];
        float power = 0.3;

        auto front_cmd = kk_driver_msg::msg::Gm6020Cmd();
        front_cmd.motor_id = {1, 3};
        front_cmd.duty = {-power * (ly - lx), power * (ly + lx)};
        gm_publisher_->publish(front_cmd);

        float ref_r = front_cmd.duty[0], ref_l = front_cmd.duty[1];
        float err_r = ref_r - 0.0, err_l = ref_l - 0.0;

        integral_right_ += err_r * dt;
        integral_left_ += err_l * dt;
        float diff_r = (err_r - prev_error_right_) / dt;
        float diff_l = (err_l - prev_error_left_) / dt;

        float out_r = Kp * err_r + Ki * integral_right_ + Kd * diff_r;
        float out_l = Kp * err_l + Ki * integral_left_ + Kd * diff_l;
        prev_error_right_ = err_r;
        prev_error_left_ = err_l;

        auto rear_cmd = kk_driver_msg::msg::Gm6020Cmd();
        rear_cmd.motor_id = {2, 4};
        rear_cmd.duty = {out_r, out_l};
        gm_publisher_->publish(rear_cmd);

        bool b1 = latest_joy_->buttons[1], b2 = latest_joy_->buttons[2];
        if (b1) {
            rear_cmd.duty = {1000.0f, 1000.0f};
            gm_publisher_->publish(rear_cmd);
        } else if (b2) {
            rear_cmd.duty = {-1000.0f, -1000.0f};
            gm_publisher_->publish(rear_cmd);
        }

        static bool prev_b7 = false, prev_b6 = false;
        bool b7 = latest_joy_->buttons[7], b6 = latest_joy_->buttons[6];

        if ((b7 && !prev_b7) || (b6 && !prev_b6)) {
            auto pwm_cmd = kk_driver_msg::msg::PwmCmd();
            pwm_cmd.port = {0};
            pwm_cmd.value = {b7 ? 1000.0f : 2000.0f};  // msg型に応じて修正
            pwm_publisher_->publish(pwm_cmd);
        }
        prev_b7 = b7;
        prev_b6 = b6;

        bool b3 = latest_joy_->buttons[3], b0 = latest_joy_->buttons[0];
        auto motor_cmd = kk_driver_msg::msg::MotorCmd();
        motor_cmd.id = {0}; // 旧: motor_id
        if (b3)
            motor_cmd.data = {3000.0f}; // 旧: value
        else if (b0)
            motor_cmd.data = {-3000.0f};
        else
            motor_cmd.data = {0.0f};
        motor_publisher_->publish(motor_cmd);
    }

    void joyCallback(const sensor_msgs::msg::Joy::SharedPtr msg) {
        latest_joy_ = msg;
    }

public:
    explicit ControlNode(const rclcpp::NodeOptions& options)
        : Node("controller_node", options)
    {
        timer_ = this->create_wall_timer(
            std::chrono::milliseconds(10),
            std::bind(&ControlNode::update, this));

        joy_subscription_ = this->create_subscription<sensor_msgs::msg::Joy>(
            "/joy", 10,
            std::bind(&ControlNode::joyCallback, this, std::placeholders::_1));

        gm_publisher_ = this->create_publisher<kk_driver_msg::msg::Gm6020Cmd>("/gm6020/cmd", 10);
        pwm_publisher_ = this->create_publisher<kk_driver_msg::msg::PwmCmd>("/pwm/cmd", 10);
        motor_publisher_ = this->create_publisher<kk_driver_msg::msg::MotorCmd>("/mtr/cmd", 10);
    }
};

int main(int argc, char* argv[]) {
    rclcpp::init(argc, argv);
    auto options = rclcpp::NodeOptions();
    rclcpp::spin(std::make_shared<ControlNode>(options));
    rclcpp::shutdown();
    return 0;
}

